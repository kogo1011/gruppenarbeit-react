name: react test

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:      
    docker-build-and-test:
      name: build and test docker image
      runs-on: ubuntu-latest
      if: github.event_name=='push'
      
      steps:
        - name: checkout repo
          uses: actions/checkout@v4

        - name: installing dependencies
          run: npm install 

        - name: react test
          run: npm run test
              
        - name: set up Docker buildx
          uses: docker/setup-buildx-action@v2

        - name: docker hub login
          uses: docker/login-action@v2
          with: 
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: react build docker image
          run: docker buildx build --push -t ${{ secrets.DOCKER_USERNAME }}/gruppenarbeit-react:1 .

              # - name: image push
              #   run: docker push ${{ secrets.DOCKER_USERNAME }}/gruppenarbeit-react:1

    terraform:
      name: setting up terraform infrastructure
      if: github.event_name=='push'
      runs-on: ubuntu-latest
      steps: 
          - name: checkout repo
            uses: actions/checkout@v4
          
          - name: set up node.js
            uses: actions/setup-node@v4
            with:
              node-version: 22
          
          - name: set up terraform
            uses: hashicorp/setup-terraform@v3
            with:
              terraform_version: latest
          
          - name: aws credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
              aws-region: eu-central-1

          - name: terraform initializing
            run: terraform init
            working-directory: ./terraform

          - name: terraform applying with auto approval
            run: terraform apply --auto-approve

        # - name: terraform validation
        #   run: terraform validate
        #   working-directory: ./terraform
          
        # - name: terraform planning
        #   run: terraform plan
        #   working-directory: ./terraform
    
    # terraform-destroy:
    #   name: Terraform Destroy
    #   if: github.event_name=='workflow_dispatch'
    #   working_directory: ./terraform
    #   run: terraform destroy --auto-approve

    # deploy:
    #   name: infrastructure deployment
    #   runs-on: ubuntu latest
    #   needs: docker-build-and-test

    #   steps:
    #     - name: checkout-repo
    #       uses: actions/checkout@v4



